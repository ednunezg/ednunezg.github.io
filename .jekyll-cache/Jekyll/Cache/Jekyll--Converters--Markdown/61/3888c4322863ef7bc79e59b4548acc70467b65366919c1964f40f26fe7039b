I"‡<h2 id="about">About</h2>

<p>Day trading is an intense game where you are competing with a large crowd of investors to react to market conditions that you can predict and react with speed. In theory, trading in an automated fashion can allow you to generate profits with a speed and frequency that is impossible for a human to execute. Other added benefits include:</p>

<ul>
  <li>You can detach yourself psychologically and emotionally from your trading decisions once you cement a trust in your strategy.</li>
  <li>Your strategy is testable against historical price data. This also means you optimize algorithm parameter by permutating these on multiple backtests</li>
  <li>Low risk of manual error while placing orders</li>
</ul>

<p>However, by doing this you are subject to the major risk of possible system failures. If you build this system, it is important that you have a fail safe methods to cover for losses caused by these failures. In this post, I will show you how I covered some of these cases.</p>

<p>A succesful strategy is one where you make judgements based on indicators you collect that can give you an edge on the market. In my experience, the process of selecting and tuning a succesful strategy is based more on how fast you can iterate and test different strategy parameters more than understanding the ‚Äúwhy‚Äù of how your strategy might work. With no formal finance background, I managed to leverage my programming knowledge to create a system by which I can easily and quickly test my strategy on thousands of strategy permulations, and then decide if I should run my strategy that day based on my confidence level of historical results. In this post, I will walk through some of the decisions behind my trading strategy and the tech stack behind the bot+backtesting framework.</p>

<h2 id="my-bots-strategy">My bot‚Äôs strategy</h2>

<p>My trading bot strategy falls into the category of low-frequency day trading with each trade consiting of a large quantity of stocks ($10k - $100k worth). The trades are low-frequency because the trades are contingent on a trendline being found on a candlestick chart once every few minutes. This is perhaps different from high-frequency day trading strategies where a trader might be sending hundreds or thousands of orders a day, and making profits on quick price movements.</p>

<p>For my strategy, I found it appropiate to use a STP and LMT OCO order type for placing orders. In an OCO order (one-cancels-the-other), your broker takes care of listening for an activation price by which you will enter a position. After this activation, the broker listens to two new price thresholds for which the position will close.</p>

<p>This order type made it easy for me to build a backtesting framework, makes interpreting results straight forward, and removes the burden of having your software listen for the appropiate moment to close positions. If your software crashes and you have pending orders that have not closed the position, the OCO instructions implicit on the order puts the responsibility of closing positions on your broker.</p>

<p>I wouldn‚Äôt reccomend this order type if you need to have control of better granularity (e.g. you want to exit your position 50% at some price point and 50% at another). This is also not recommended if your strategy is contingent on time if say, you want to force a position to close X minutes after you enter. in this case, sending multiple MARKET orders would be more appropiate.</p>

<p style="text-align: center;"><img src="/posts-photos/ALGOTRADING/oco.png" alt="OCO order" class="img-responsive" height="300px" /></p>

<h2 id="indicators-leveraged-for-my-bots-strategy">Indicators leveraged for my bot‚Äôs strategy</h2>

<p>The bot has to go through the iterative process of</p>

<p>(1) Fetching price data and additional data useful for your indicators</p>

<p>(2) Calculating indicators</p>

<p>(3) Check if indicators results satisfy order placement criteria</p>

<p>(4) Place OCO order</p>

<p>(5) Idle wait for next time interval</p>

<p>My strategy relied on trendline detection as the key indicator for deciding whether to execute trades. This was achieved with the use of my python library <b><a href="https://github.com/ednunezg/pytrendline">pytrendline</a></b> which you can use for detecting trendlines formed at the support or resistance level of candlesticks.</p>

<p>Another indicators I leveraged were news sentiments based on keywords matched against a stock‚Äôs news feed. SMA and EMA curves and number of price inflection points were also computed and analyzed against a set of criteria to decide if the trade is worth doing.</p>
<h2 id="what-do-you-need-to-build-reliable-and-back-testable-trading-bot">What do you need to build reliable and back-testable trading bot?</h2>

<p>A succesful testable bot should be one that can be made with an offline and online mode of operation. If these two modes can be provided as an input, you can leverage the offline mode for performing historical tests using a backtesting framework that wraps around the program, and the online mode for a production use case.</p>

<p>I designed my program with the following inputs:</p>
<ul>
  <li>List of symbols to trade with (my strategy at the moment does require I filter through stocks manually at the beginning of the day)</li>
  <li>Online or offline mode</li>
  <li>If offline mode is specified, date to simulate</li>
</ul>

<h2 id="ensuring-reliability">Ensuring reliability</h2>

<h2 id="lessons-learned-and-a-word-of-caution">Lessons learned and a word of caution</h2>
:ET